#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

#define PORT 8080

int main() {
    int server_fd, new_socket;
    struct sockaddr_in address;
    int addrlen = sizeof(address);
    int buffer[1024] = {0};
    int num_count, sum = 0;

    // Crearea socketului
    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {
        perror("Socket failed");
        exit(EXIT_FAILURE);
    }

    // Configurarea adresei serverului
    address.sin_family = AF_INET;
    address.sin_addr.s_addr = INADDR_ANY;
    address.sin_port = htons(PORT);

    // Atașarea socketului la port
    if (bind(server_fd, (struct sockaddr*)&address, sizeof(address)) < 0) {
        perror("Bind failed");
        exit(EXIT_FAILURE);
    }

    // Ascultarea conexiunilor
    if (listen(server_fd, 3) < 0) {
        perror("Listen");
        exit(EXIT_FAILURE);
    }

    printf("Serverul asculta pe portul %d...\n", PORT);

    // Acceptarea unei conexiuni de la un client
    if ((new_socket = accept(server_fd, (struct sockaddr*)&address, (socklen_t*)&addrlen)) < 0) {
        perror("Accept");
        exit(EXIT_FAILURE);
    }

    // Primirea numărului de elemente din șir
    recv(new_socket, &num_count, sizeof(int), 0);

    // Primirea efectivă a șirului de numere
    recv(new_socket, buffer, num_count * sizeof(int), 0);

    // Calcularea sumei numerelor primite
    for (int i = 0; i < num_count; i++) {
        sum += buffer[i];
    }

    printf("Serverul a primit un sir de %d numere. Suma este: %d\n", num_count, sum);

    // Trimiterea sumei înapoi la client
    send(new_socket, &sum, sizeof(int), 0);

    close(new_socket);
    close(server_fd);
    return 0;
}
