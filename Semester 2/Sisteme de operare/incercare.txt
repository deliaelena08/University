#include<stdio.h>
#include<stdlib.h>
#include<pthread.h>
#include<unistd.h>
#include<fcntl.h>


pthread_mutex_t mtx=PTHREAD_MUTEX_INITIALIZER;
pthread_barrier_t bar;

char unsigned elemente[110000];
int k;
int aleatoare[55];
int frecventa[256];
int medie,cma;


void* do_work(void* a){
  int id=*(int*)a;
  free(a);
  int j=k*id;
  printf("Id: %d \n",id);
  for(int i=j;i<j+k;i++){
	printf("ELement:%d ",elemente[i]);
	for(int fr=0;fr<k;fr++){
	  if(elemente[i]==aleatoare[fr]){
		printf("intra %d ",elemente[i]);
		pthread_mutex_lock(&mtx);
		frecventa[aleatoare[fr]]++;
		pthread_mutex_unlock(&mtx);
	  }
	}
  }
  pthread_barrier_wait(&bar);
  //asteptam sa e calculeze toate frecventele
  if(id==0){
    int sum=0;
    for(int i=0;i<k;i++){
	int aleator=aleatoare[i];
	sum+=frecventa[aleator];
    }
    pthread_mutex_lock(&mtx);
    medie=sum/k;
    pthread_mutex_unlock(&mtx);
  }
  pthread_barrier_wait(&bar);
  printf("Media este : %d \n",medie);
  pthread_mutex_lock(&mtx);
  cma=abs(frecventa[aleatoare[0]]-medie);
  for(int i=1;i<k;i++){
	int aleator=aleatoare[i];
 	if(abs(frecventa[aleator]-medie)<cma){
	  cma=abs(frecventa[aleator]-medie);
  	}
  }
  pthread_mutex_unlock(&mtx);
  pthread_barrier_wait(&bar);
  printf("Valoarea cea mai apropiata este %d \n",cma);
  for(int i=0;i<k;i++){
  	if(frecventa[aleatoare[i]]==cma)
	  printf("Numarul %d are frecventa : %d\n",aleatoare[i],frecventa[aleatoare[i]]);
  }
  return NULL;
}

int main(int argc,char* argv[]){
  FILE* fd;
  fd=fopen("cv.txt","r");
  for(int i=0;i<11000;i++){
	fscanf(fd,"%hhd",&elemente[i]);
  }
  fclose(fd);
  printf("K:");
  scanf("%d",&k);
  for(int i=0;i<k;i++){
	aleatoare[i]=rand()%255+1;
	printf("Numarul %d aleator este %d \n",i,aleatoare[i]);

  }
  pthread_t thr[k];
  pthread_barrier_init(&bar,NULL,k);
  for(int i=0;i<k;i++){
	int* id=malloc(sizeof(int));
	*id=i;
	pthread_create(&thr[i],NULL,do_work,id);
  }
  for(int i=0;i<k;i++){
 	pthread_join(thr[i],NULL);
 }
  pthread_mutex_destroy(&mtx);
  pthread_barrier_destroy(&bar);
  return 0;
}
