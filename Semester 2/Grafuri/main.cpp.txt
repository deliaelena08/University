#include <iostream>
#include <limits.h>
#include <queue>
#include <fstream>

using namespace std;
ifstream f("citire.in");
ofstream g("afisare.out");
int n,m;

bool bfs(int rGraph[100][100], int s, int t, int parent[])
{

    bool viz[100]={0};
    queue<int> q;
    q.push(s);
    viz[s] = true;
    parent[s] = -1;
    while (!q.empty()) {
        int u = q.front();
        q.pop();
        for (int v = 0; v < n+m+2; v++) {
            if (viz[v] == false && rGraph[u][v] > 0) {

                if (v == t) {
                    parent[v] = u;
                    return true;
                }
                q.push(v);
                parent[v] = u;
                viz[v] = true;
            }
        }
    }

    return false;
}


int fordFulkerson(int graph[100][100], int s, int t)
{
    int u, v;

    int rGraph[100][100];

    for (u = 0; u < 100; u++)
        for (v = 0; v < 100; v++) {
            rGraph[u][v] = graph[u][v];
        }

    int parent[100];


    int max_flow = 0; // There is no flow initially

    while (bfs(rGraph, s, t, parent)) {
        int path_flow = INT_MAX;
        for (v = t; v != s; v = parent[v]) {
            u = parent[v];
            path_flow = min(path_flow, rGraph[u][v]);
        }

        for (v = t; v != s; v = parent[v]) {
            u = parent[v];
            rGraph[u][v] -= path_flow;
            rGraph[v][u] += path_flow;
        }

        max_flow += path_flow;
    }
    return max_flow;
}


int main()
{
    int graph[100][100],a,b,c,e;
    f>>n>>m>>e; //e nr de muchii
    //adaug nodul sursa=n, nodul destinatie=n+m+1
    for(int i=1;i<=e;i++)
    {
        f>>a>>b;
        graph[a][b+n]=1;
        graph[b+n][a]=1;

        //nodul sursa
        graph[0][a]=1;
        graph[a][0]=1;

        //nodul destinatie
        graph[n+m+1][b+n]=1;
        graph[b+n][n+m+1]=1;
    }

     cout  << fordFulkerson(graph,0,n+m+1);

    return 0;
}