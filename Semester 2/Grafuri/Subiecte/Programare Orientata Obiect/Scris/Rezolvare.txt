


1)
#include <iostream>
#include <assert.h>
using namespace std;
// Rolul acestei functii este de a calcula rasturnatul unui numar 
// preconditii x <=0, altfel programul o sa arunce exceptii
// param de intrare: x - intreg
// param de iesire: rez - intreg
// postconditii: rez sa fie inversul lui x
int f(int x) {
if (x <= 0)
throw std::exception("Invalid argument!");
int rez = 0;
while (x)
{
rez = rez * 10 + x % 10;
x /= 10;
}
return rez;
}
void teste() {
assert(f(12) == 21);
assert(f(123) == 321);
try {
f(0);
assert(false);
}
catch (exception) {
assert(true);
}
try {
f(-2);
assert(false);
}
catch (exception) {
assert(true);
}
}
int main() {
teste();
return 0;
}




2)
/*
#include <iostream>
using namespace std;
int except(bool thrEx) {
if (thrEx) {
throw 2;
}
return 3;
}
int main() {
try {
cout << except(1 < 1);
cout << except(true);
cout << except(false);
}
catch (int ex) {
cout << ex;
}
cout << 4;
return 0;
}
// Rezultatul este 324, deoarece al 2 lea except arunca exceptie si rezulta valoarea 2
// iar partea de mai jos nu se executa intrand pe catch
*/
/*
#include <iostream>
using namespace std;
class A {
public:
A() { cout << "A" << endl; }
~A() { cout << "~A" << endl; }
void print() {
cout << "print" << endl;
}
};
void f() {
A a[2];
a[1].print();
}
int main() {
f();
return 0;
}*/
// rezultatul este 
// A
// A
// print
// ~A
// ~A





3)
#include <iostream>
#include <vector>
#include <string>
#define _CRTDBG_MAP_ALLOC
#include <stdlib.h>
#include <crtdbg.h>
using namespace std;
class Smoothy {
private:
int pret;
public:
Smoothy(int p) : pret{ p } {};
virtual int getPret() {
return this->pret;
}
virtual string descriere() = 0;
virtual ~Smoothy() = default;
};
class BasicSmoothy : public Smoothy {
private:
string nume;
public:
BasicSmoothy(int pret, string n) : Smoothy(pret), nume{ n }{};
string descriere() override {
return nume;
}
};
class DecoratorSmoothy : public Smoothy {
private:
Smoothy* s;
public:
DecoratorSmoothy(Smoothy* s0) : Smoothy(s0->getPret()), s{ s0 } {};
virtual string descriere() override{
return s->descriere();
};
virtual int getPret() override{
return s->getPret();
}
virtual ~DecoratorSmoothy() {
delete s;
}
};
class SmoothyCuFrisca : public DecoratorSmoothy {
public:
SmoothyCuFrisca(Smoothy* s) : DecoratorSmoothy(s) {};
string descriere() override {
return DecoratorSmoothy::descriere() + " cu frisca";
};
int getPret() override {
return DecoratorSmoothy::getPret() + 2;
}
};
class SmoothyCuUmbreluta : public DecoratorSmoothy {
public:
SmoothyCuUmbreluta(Smoothy* s) : DecoratorSmoothy(s) {};
string descriere() override {
return DecoratorSmoothy::descriere() + " cu umbreluta";
};
int getPret() override {
return DecoratorSmoothy::getPret() + 3;
}
};
vector<Smoothy*> functie2() {
vector<Smoothy*> rez;
rez.push_back(new SmoothyCuUmbreluta(new SmoothyCuFrisca(new BasicSmoothy{ 1, "kivi" })));
rez.push_back(new SmoothyCuFrisca(new BasicSmoothy{ 2, "capsuni" }));
rez.push_back(new BasicSmoothy{ 3, "kivi" });
return rez;
}
int main() {
{
vector<Smoothy*> rez = functie2();
for (int i = 0; i < rez.size() - 1; i++)
for (int j = i + 1; j < rez.size(); j++)
if (rez[i]->descriere() > rez[j]->descriere())
swap(rez[i], rez[j]);
for (auto s : rez) {
cout << s->descriere() << " " << s->getPret() << '\n';
delete s;
}
}
_CrtDumpMemoryLeaks();
return 0;
}



4)
/*
#include <iostream>
#include <string>
#include <vector>
using std::string;
using std::vector;
using std::cout;
template<typename TElem>
class Geanta {
private:
string owner;
vector<TElem> obiecte;
public:
Geanta(string nume) : owner{ nume } {};
Geanta& operator+ (const TElem& obj) {
obiecte.push_back(obj);
return *this;
};
typename vector<TElem>::iterator begin() {
return obiecte.begin();
}
typename vector<TElem>::iterator end() {
return obiecte.end();
}
};
void calatorie() {
Geanta<string> ganta{ "Ion" };//creaza geanta pentru Ion
ganta = ganta + string{ "haine" }; //adauga obiect in ganta
ganta + string{ "pahar" };
for (auto o : ganta) {//itereaza obiectele din geanta
cout << o << "\n";
}
}
int main() {
calatorie();
return 0;
}*/
