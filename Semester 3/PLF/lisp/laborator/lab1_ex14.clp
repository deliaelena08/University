(defun elimin( L N POZ)
(COND ((NULL L) NIL)
	   ((= 0 (mod POZ N)) (elimin (cdr L) N (1+ POZ)))
	   (t (cons (car L) (elimin (cdr L) N (1+ POZ))))
))

(defun apel( L N)
	(elimin L N 1))


; (aspect_vale '(10 8 6 17 19 20) '0)
(defun aspect_vale(L flag)
( cond ((AND (null (cdr L)) (= 0 flag)) NIL)
	   ((AND (null (cdr L)) (= 1 flag)) t)
	   ((AND (< (CAR L) (CADR L)) (= flag 0)) (aspect_vale (CDR L) 1))
	   ((AND (< (CAR L) (CADR L)) (= flag 1)) (aspect_vale (CDR L) 1))
	   ((AND (> (CAR L) (CADR L)) (= flag 0)) (aspect_vale (CDR L) 0))
	   ((= (CAR L) (CADR L)) (aspect_vale (CDR L) flag))
	   (t NIL)
)
)


;(apel2 '(10 (8 (6)) () (10 (1 ())) 17 19 20))
(Defun liniarizare(L)
(COND ((null L) nil)
	  ((numberp (car L)) (append (list(car L)) (liniarizare (cdr L))))
	  ((listp(car L)) (append (liniarizare (CAR L)) (liniarizare (cdr L))))
	  (t NIL)
))

(Defun minim(L)
(COND ((null (cdr L)) (CAR L))
	  ((< (CAR L) (minim (cdr L))) (CAR L))
	  (t (minim(cdr L)))
))

(defun apel2 (L)
(minim (liniarizare L))
)